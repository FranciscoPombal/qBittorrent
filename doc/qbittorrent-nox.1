.\" Automatically generated by Pandoc 2.9.2
.\"
.TH "QBITTORRENT-NOX" "1" "2020-03-20" "BitTorrent client written in C++ / Qt" ""
.hy
.SH NAME
.PP
\f[B]qBittorrent\f[R] - BitTorrent client written in C++ / Qt
(command-line version)
.SH SYNOPSIS
.PP
\f[B]qbittorrent\f[R] [\f[I]OPTIONS\f[R]] [\f[I]URI\f[R]\&...]
.PD 0
.P
.PD
\f[B]qbittorrent\f[R] \f[B]\f[CB]-h\f[B] | \f[CB]-v\f[B]\f[R]
.SH DESCRIPTION
.PP
\f[B]qBittorrent-nox\f[R] is an advanced command-line BitTorrent client
written in C++ / Qt, using the \f[B]libtorrent-rasterbar\f[R] library by
Arvid Norberg as the backend.
qBittorrent-nox is fast, stable and light, and is controllable via
feature-rich Web UI similar to popular graphical clients.
.PP
qBittorrent-nox supports several important modern features and BEPs
(BitTorrent Enhancement Proposals) such as UPnP port forwarding /
NAT-PMP, DHT (Mainline) and magnet URI (also known as magnet link)
support, IPv6, uTP, PeX, LSD, UDP tracker protocol support and more.
Refer to the \f[B]libtorrent-rasterbar\f[R] documentation for the full
list of features and supported BEPs.
.PP
In addition, qBittorrent-nox supports Unicode and it provides a good
integrated Python-based torrent search engine, an RSS downloader, a
torrent creation GUI, a basic embedded tracker to facilitate sharing
torrents with friends, and an HTTP API/Web UI combo for remote
access/administration.
.PP
qBittorrent-nox is meant to be controlled via its bundled Web UI/Web API
which is accessible by default at http://localhost:8080.
The default access credentials are the user \[lq]admin\[rq] with
\[lq]adminadmin\[rq] as a password.
qBittorrent-nox provides good support for setting up secure HTTPS
access, either directly or via a reverse-proxy scheme.
.PP
Please note that at present, not all of the features of the GUI version
may be available in the Web UI or exposed via HTTP API methods.
They are added on a best-effort basis.
From version 4.1.0 and up, it is possible configure qBittorrent-nox to
use alternate Web UIs developed by the community instead of the default
one.
.PP
When qBittorrent-nox is started from a terminal, its \f[B]stdout\f[R]
and \f[B]stderr\f[R] will be attached to that terminal.
.PP
If no arguments are specified, qBittorrent-nox simply starts.
qBittorrent-nox supports running as a background daemon, see the
\f[B]\f[CB]--daemon\f[B]\f[R] option.
This is convenient for managing its lifecycle with a service manager
like \f[B]systemd(1)\f[R], for example.
.PP
If either \f[B]\f[CB]-h\f[B]\f[R] or \f[B]\f[CB]-v\f[B]\f[R] is
specified, the relevant information is printed to the terminal and
qBittorrent exits.
Passing any other option alongside \f[B]\f[CB]-h\f[B]\f[R] or
\f[B]\f[CB]-v\f[B]\f[R] is not allowed.
.PP
\f[I]URI\f[R] is a string pointing to a BitTorrent metainfo file (a
\[lq]torrent\[rq]).
It may be a path to a file on disk or an online resource accessible
through a supported URI scheme such as \f[B]magnet\f[R], \f[B]HTTP\f[R],
or \f[B]HTTPS\f[R].
.PP
Standalone \f[B]info-hashes\f[R] are also accepted as shorthand for a
bare-bones \f[B]magnet\f[R] \f[I]URI\f[R] constructed from that
\f[B]info-hash\f[R].
For example, passing the \f[B]info-hash\f[R]
\f[I]\f[CI]e73108cbd628fee5cf203acdf668c5bf45d07810\f[I]\f[R] (for the
file \f[C]ubuntu-18.04.4-live-server-amd64.iso\f[R]) is the same as
passing the \f[B]magnet\f[R] \f[I]URI\f[R]
\f[I]\f[CI]magnet:?xt=urn:btih:e73108cbd628fee5cf203acdf668c5bf45d07810\f[I]\f[R].
.PP
TODO: what happens in the nox version?
By default, any \f[I]URI\f[R] passed as an argument will be downloaded
if needed, and then shown in an \[lq]Add New Torrent\[rq] dialog to be
added to the transfer list.
.PP
\f[I]OPTIONS\f[R] control general program settings, such as the port the
WebUI should listen on, as well as settings for the torrents to be
added, if any, such as their save path.
In addition, the \[lq]Add New Torrent\[rq] dialog can be entirely
skipped, to just automatically add the torrents wihthout confirmation
with the specified settings.
.PP
Some \f[I]OPTIONS\f[R] have both a long form
(\f[B]\f[CB]--option\f[B]\f[R]) and a short form
(\f[B]\f[CB]-o\f[B]\f[R]), others only have one of the two.
.PP
\f[I]OPTIONS\f[R] can be passed in from several sources.
If the same option is specified in multiple sources, the last one takes
precedence, in the following order:
.IP "1." 3
The main configuration file (see the \f[I]FILES\f[R] section)
.IP "2." 3
\f[I]ENVIRONMENT\f[R] variables
.IP "3." 3
Command-line \f[I]OPTIONS\f[R]
.PP
\f[B]IMPORTANT NOTE:\f[R] Settings changed via command-line
\f[I]OPTIONS\f[R] or \f[I]ENVIRONMENT\f[R] variables not only
\f[B]override\f[R] their corresponding values in the configuration file,
they \f[B]also overwrite\f[R] them.
.PP
\f[I]ENVIRONMENT\f[R] variables and command-line \f[I]OPTIONS\f[R] can
currently only override a small subset of all the available settings
that can be configured in the main configuration file.
.PP
qBittorrent-nox can be cleanly terminated by sending the
\f[B]SIGINT\f[R] or \f[B]SIGTERM\f[R] signals to its process.
.SH OPTIONS
.PP
TODO: options: - no torrent creator - no skip splash option - daemon:
start in background, cant use if already started (but probably instances
with different configuration names can still coexist)
.PP
TODO: document the fact that the main config file is populated upon
first save.
qbittorrent-conf manpage does not exist, but it\[cq]s better to just
tell users to start once to generate it than to create and maintain such
a man page
.SH ENVIRONMENT
.PP
\f[I]OPTIONS\f[R] may be supplied via environment variables with
equivalent names.
.PP
For an option named \f[B]parameter-name\f[R], the corresponding
environment variable name is \f[B]QBT_PARAMETER_NAME\f[R].
In other words, the parameter name is converted to upper-case, any
hyphens (\f[B]-\f[R]) are replaced by underscores (\f[B]_\f[R]), and
\f[B]QBT_\f[R] is prepended to it.
.PP
To pass flag values, set the variable to \f[B]1\f[R] or \f[B]TRUE\f[R].
For example, \f[B]\f[CB]--add-paused=true\f[B]\f[R] becomes
\f[B]QBT_ADD_PAUSED=1\f[R]
.SH FILES
.SS Standard configuration files directory hierarchy
.PP
Currently, qBittorrent complies somewhat with the Freedesktop XDG Base
Directory specification.
The configuration files are stored in the default directories of the
specification:
.IP "1." 3
Configuration files are stored in \f[I]\[ti]/.config/qBittorrent\f[R]
.IP "2." 3
Data files are stored in \f[I]\[ti]/.local/share/data/qBittorrent\f[R]
.IP "3." 3
Cache is stored in \f[I]\[ti]/.cache/qBittorrent\f[R]
.PP
However, qBittorrent will not use custom XDG paths set via the
\f[B]$XDG_CONFIG_HOME\f[R] environment variables and the like; it will
always use the default ones.
.PP
The \f[B]\f[CB]--configuration\f[B]\f[R] and
\f[B]\f[CB]profile\f[B]\f[R] options will instruct qBittorrent to
instead create/use configuration files in different places.
Refer to the documentation of each of these options to learn more.
.SS Files used by qBittorrent
.PP
This is a list of the files qBittorrent creates and uses for normal
operation.
While the name and purpose of these files is unlikely to change, the
file formats themselves are not stable, and thus intentionally not
documented here.
Depending on what features are used, some files may not exist.
They are only created when needed.
.TP
\f[I]\[ti]/.config/qBittorrent/qBittorrent.conf\f[R]
Main configuration file.
.TP
\f[I]\[ti]/.config/qBittorrent/qBittorrent-data.conf\f[R]
This is where all-time statistics are saved.
.TP
\f[I]\[ti]/.config/qBittorrent/rss/feeds.json\f[R]
RSS feeds configuration.
.TP
\f[I]\[ti]/.config/qBittorrent/rss/download_rules.json\f[R]
RSS auto-downloading rules configuration file.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/BT_backup/\f[R]
This directory contains the \f[I].fastresume\f[R] files, which is the
mechanism qBittorrent uses to keep track of the state of each added
torrent across restarts.
In addition, a copy of each of the added torrents\[cq] metainfo files is
kept here, with the torrents\[cq] hashes as the file names.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/GeoDB/\f[R]
Database files for IP <-> country flag resolution in the \[lq]Peers\[rq]
tab.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/logs/\f[R]
Execution logs.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/nova3/\f[R]
Python files for the Search Engine functionality.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/nova3/engines/\f[R]
Custom search engine code and files.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/rss/articles/\f[R]
RSS feed storage.
.TP
\f[I]\[ti]/.cache/qBittorrent/\f[R]
Miscellaneous temporary cache files.
.TP
\f[I]\[ti]/.config/qBittorrent/rss/storage.lock\f[R]
RSS feed settings lock file.
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/BT_backup/session.lock\f[R]
BT_backup lock file, for \f[I].fastresume\f[R] files and backup metainfo
files (\f[I].torrent\f[R] files).
.TP
\f[I]\[ti]/.local/share/data/qBittorrent/rss/articles/storage.lock\f[R]
RSS articles lock file.
.TP
\f[I]/tmp/qtsingleapp-qBitto-\f[BI]<app_id_string>\f[I]-lockfile\f[R]
Per-configuration application instance lock file.
Each application instance with a different
\f[B]\f[CB]--configuration\f[B]\f[R] or \f[B]\f[CB]--profile\f[B]\f[R]
has a different \f[B]<app_id_string>\f[R].
Two instances with the same configuration cannot run at the same time.
.SH NOTES
.PP
Visit the wiki at <http://wiki.qbittorrent.org> for addtional
information, including guides on how to compile qBittorrent from source.
.SH BUGS
.PP
Please report any bugs at <http://bugs.qbittorrent.org>.
.PP
TODO: examples
.SH SEE ALSO
.PP
\f[B]btcheck(1)\f[R], \f[B]mktorrent(1)\f[R]
